setinverse=setinverse,
getinverse=getinverse
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverser <- NULL
# 1. set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# 2. get the value of the matrix
get <- function() x
# 3. set the value of inverse of the matrix
setinverse <- function(inverse) inverser <<- inverse
# 4. get the value of inverse of the matrix
getinverse <- function() inverser
list(
set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
inv
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverser <- NULL
# 1. set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# 2. get the value of the matrix
get <- function() x
# 3. set the value of inverse of the matrix
setinverse <- function(inverse) inverser <<- inverse
# 4. get the value of inverse of the matrix
getinverse <- function() inverser
list(
set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverser <- x$getinverse()
if(!is.null(inverser)) {
message("getting cached data.")
return(inverser)
}
data <- x$get()
inverser <- solve(data)
x$setinverse(inverser)
inverser
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
m$get()
cacheSolve(m)
m
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverser <- NULL
# 1. set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# 2. get the value of the matrix
get <- function() x
# 3. set the value of inverse of the matrix
setinverse <- function(inverse) inverser <<- inverse
# 4. get the value of inverse of the matrix
getinverse <- function() inverser
list(
set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverser <- x$getinverse()
if(!is.null(inverser)) {
message("getting cached data.")
return(inverser)
}
data <- x$get()
inverser <- solve(data)
x$setinverse(inverser)
inverser
}
bye()
swirl()
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverser <- NULL
# 1. set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# 2. get the value of the matrix
get <- function() x
# 3. set the value of inverse of the matrix
setinverse <- function(inverse) inverser <<- inverse
# 4. get the value of inverse of the matrix
getinverse <- function() inverser
list(
set=set,
get=get,
setinverse=setinverse,
getinverse=getinverse
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverser <- x$getinverse()
if(!is.null(inverser)) {
message("getting cached data.")
return(inverser)
}
data <- x$get()
inverser <- solve(data)
x$setinverse(inverser)
inverser
}
swirl::swirl()
swirl::delete_progress()
swirl::select_language()
swirl::main()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
objects.size(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10, replace = FALSE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(1:100)
flips <- sample(c(0,1), 1:100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
View(flips2)
flips2
sum(flips2)
?rbinom
?rnom
?rnorm
rnorm(10)
rnorm(100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5)
rpois(n = 5)
rpois(n = 5, mean = 10)
rpois(5, mean = 10)
example("rpois")
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data("cars")
my_pois <- replicate(100, rpois(5, 10))
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$dist, cars$speed, xlab = "Speed")
plot(y = cars$dist, x = cars$speed, xlab = "Speed")
plot(y = cars$dist, x = cars$speed, xlab = "Speed", ylab = "Stopping Distance")
plot(y = cars$dist, x = cars$speed, ylab = "Stopping Distance")
plot(y = cars$dist, x = cars$speed, xlab = "Speed", ylab = "Stopping Distance")
plot(y = cars$dist, x = cars$speed, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 'red')
plot(cars, col = 'red')
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl and data = mtcars)
boxplot(mpg ~ cyl and data = mtcars)
boxplot(mpg ~ cyl and data = mtcars))
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
bye()
swirl::bye()
dir()
ls
str(ls)
str(dir)
str(mean)
setwd("C:\Users\jamse\Desktop\coursera\data-science\files")
setwd("C:/Users/jamse/Desktop/coursera/data-science/files")
getwd()
dir()
clin <- read.csv("hospital-data.csv")
clin
View(clin)
outcome <- read.csv("outcome-of-care-measures.csv")
View(outcome)
head(outcome)
View(outcome[,11:12])
View(outcome[,11:11])
View(outcome[,11:12])
View(!is.na(outcome[,11:12]))
View(outcome[,11:12])
outcome[, 11] <- as.numeric(outcome[,11])
hist(outcome[,11])
dim(outcome)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best("SC", "heart attack")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, rank = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (!state %in% fd[, "state"]) {
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(rank)) {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]                     # extracting dataframe for the called state
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
output <- ts[, "hospital"][rank]
} else if (!is.numeric(rank)){
if (rank == "best") {
output <- best(state, outcome)
} else if (rank == "worst") {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"], decreasing = TRUE), ]
output <- ts[, "hospital"][1]
} else {
stop('invalid rank')
}
}
return(output)
}
rankhospital <- function(state, outcome, rank = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (!state %in% fd[, "state"]) {
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(rank)) {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]                     # extracting dataframe for the called state
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
output <- ts[, "hospital"][rank]
} else if (!is.numeric(rank)){
if (rank == "best") {
output <- best(state, outcome)
} else if (rank == "worst") {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"], decreasing = TRUE), ]
output <- ts[, "hospital"][1]
} else {
stop('invalid rank')
}
}
return(output)
}
rankhospital <- function(state, outcome, rank = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (!state %in% fd[, "state"]) {
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(rank)) {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]                     # extracting dataframe for the called state
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
output <- ts[, "hospital"][rank]
} else if (!is.numeric(rank)){
if (rank == "best") {
output <- best(state, outcome)
} else if (rank == "worst") {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"], decreasing = TRUE), ]
output <- ts[, "hospital"][1]
} else {
stop('invalid rank')
}
}
return(output)
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
set.seed(1)
rpois(5,2)
class(rpois(5,2))
library(swirl)
ls()
rm(list = ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
bye()
iris
library(jsonlite)
kl <- toJSON(iris)
KL
kl
kl
names(kl)
kl
names(kl)
names(kl$owner)
cat(kl)
kl <- toJSON(iris, pretty = TRUE)
cat(kl)
f1 <- download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = getwd(), method = "curl")
f1 <- download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = getwd())
getwd()
ls
setwd("c:\Users\jamse\Desktop\coursera\data-science\data-cleaning\files")
setwd("c:\Users\jamse\Desktop\coursera\data-science\data-cleaning\files")
setwd("c:\Users\jamse\Desktop\coursera\data-science\data-cleaning\files")
setwd("c:\\Users\\jamse\\Desktop\\coursera\\data-science\\data-cleaning\\files")
getwd()
f1 <- download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = getwd())
f1 <- download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = getwd())
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = getwd())
